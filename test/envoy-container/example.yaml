# Base config for a split xDS management server on 9902, admin port on 9901
# The admin ports are open to listen on all network cards to allow for running
# as a stand-alone docker container within an EC2 container instance in an
# ECS cluster.
dynamic_resources:
  # LDS: envoy.api.v2.Listener
  # RDS: envoy.api.v2.RouteConfiguration
  # VHDS: envoy.api.v2.Vhds
  # CDS: envoy.api.v2.Cluster
  # EDS: envoy.api.v2.ClusterLoadAssignment
  # SDS: envoy.api.v2.Auth.Secret
  # RTDS: envoy.service.discovery.v2.Runtime

name: xds_cluster
node:
  cluster: test-cluster
  id: test-id
admin:
  access_log_path: /dev/stdout
  address:
    socket_address:
      # Listen to all networks, so that nightjar can call into it.
      address: 0.0.0.0
      port_value: 9901
static_resources:
  listeners:
    - name: "http"
      address:
        socket_address:
          protocol: tcp
          address: 0.0.0.0
          port_value: 80
      filter_chains:
        - filters:
          - name: "envoy.http_connection_manager"
            config:
              stat_prefix: "http-80"
              codec_type: AUTO
              stream_idle_timeout: "0s"
              http_filters:
                - name: "envoy.router"
              route_config:
                name: "route-80"
                validate_clusters: true
                virtual_hosts:
                  - name: "host-80"
                    domains:
                      - "*"
                    routes:
                      - match:
                          path: "/healthcheck"
                        direct_response:
                          status: 200
                          body:
                            inline_string: '{"status": "Proxy OK"}'
                      - match:
                          path: "/v1/Pets"
                        route:
                          timeout: "300s"
                          cluster: "http-8080"
                      - match:
                          prefix: "/v1/Pets/"
                        route:
                          timeout: "300s"
                          cluster: "http-8080"
  clusters:
    - name: http-8080
      connect_timeout: "0.25s"
      lb_policy: "ROUND_ROBIN"
      type: STATIC
      http_protocol_options: {}
      http2_protocol_options: null
      load_assignment:
        cluster_name: http-8080
        endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    protocol: tcp
                    address: 127.0.0.1
                    port_value: 8080
